
lazabs.horn.tests.MainArrays
Solving List(Clause(p0(1, cnt, a),List(),true), Clause(p1(0, 0, a),List(p0(1, cnt, a)),true), Clause(p2(c, cnt, a),List(p1(c, cnt, a)),(((4 + -1 * cnt) + -1) >= 0)), Clause(p0(c, cnt, a),List(p1(c, cnt, a)),((cnt + -4) >= 0)), Clause(p1(c, (cnt + 1), a),List(p2(c, cnt, a)),((select(a, (cnt + 1)) + -1 * select(a, cnt)) >= 0)), Clause(p1(1, (cnt + 1), store(store(a, cnt, select(a, (cnt + 1))), (cnt + 1), select(a, cnt))),List(p2(c, cnt, a)),(((select(a, cnt) + -1 * select(a, (cnt + 1))) + -1) >= 0)), Clause(p3(0, cnt, a),List(p0(0, cnt, a)),true), Clause(FALSE,List(p3(c, cnt, a)),((k = 3) & (((select(a, k) + -1 * select(a, (k + 1))) + -1) >= 0)))) ...
Theories: Types, SimpleArray(1)
Unique satisfiable clauses: 8
   1 clauses with 0 body literals
   7 clauses with 1 body literals

--------------------------------- Statistics -----------------------------------
CEGAR iterations:                                      6
Final number of abstract states:                       5
Final number of matched abstract states:               12
Final number of abstract edges:                        18
Number of generated predicates:                        11
Average predicate size (# of sub-formulas):            1.64

--------------------------------------------------------------------------------


SOLVABLE: 
Solving List(Clause(p0(x, a),List(),true), Clause(p1(0, a),List(p0(x, a)),true), Clause(p2(x, store(a, x, x)),List(p1(x, a)),(((3 + -1 * x) + -1) >= 0)), Clause(p1((x + 1), a),List(p2(x, a)),true), Clause(p3(x, a),List(p1(x, a)),((x + -3) >= 0)), Clause(FALSE,List(p3(x, a)),!(select(a, 0) = 0))) ...
Theories: Types, SimpleArray(1)
Unique satisfiable clauses: 6
   1 clauses with 0 body literals
   5 clauses with 1 body literals

--------------------------------- Statistics -----------------------------------
CEGAR iterations:                                      4
Final number of abstract states:                       5
Final number of matched abstract states:               9
Final number of abstract edges:                        10
Number of generated predicates:                        8
Average predicate size (# of sub-formulas):            1.00

--------------------------------------------------------------------------------


SOLVABLE: 

lazabs.horn.tests.MainADT
ADT: ADT(p)

Clause(i1(p(0, true)),List(),true)
Clause(i2(p((left(p) + 1), (1 + -1 * right(p)))),List(i1(p)),true)
Clause(i1(p(2 * left(p), (1 + -1 * right(p)))),List(i2(p)),true)
Clause(FALSE,List(i1(p)),(!(left(p) >= 0) | !(right(p) = true)))

Solving ...

------------------------------- Preprocessing ----------------------------------
                                                       #clauses  #relation syms
Initially:                                             4         2


Theories: Types, ADT(true, false)
Unique satisfiable clauses: 3
   1 clauses with 0 body literals
   2 clauses with 1 body literals

--------------------------------- Statistics -----------------------------------
CEGAR iterations:                                      1
Final number of abstract states:                       1
Final number of matched abstract states:               1
Final number of abstract edges:                        2
Number of generated predicates:                        1
Average predicate size (# of sub-formulas):            1.00

--------------------------------------------------------------------------------

Left(

lazabs.horn.tests.MainList
ADT: ADT(red, green, blue, nil, cons)

Clause(C(nil, y, y),List(),true)
Clause(C(cons(c, x), y, cons(c, r)),List(C(x, y, r)),true)
Clause(S(nil, 0),List(),true)
Clause(S(cons(c, x), (n + 1)),List(S(x, n)),true)
Clause(FALSE,List(S(x, n)),!(n >= 0))
Clause(FALSE,List(C(x, y, r)),!((clist_size(r) + -1 * 1) = (((clist_size(x) + -1 * 1) + clist_size(y)) + -1 * 1)))
Clause(FALSE,List(C(x, y, r)),!(EPS EX EX EX ((((_0 = (clist_size(r) + -1 * 1)) & (_1 = mul(_3, _2))) & (_2 = 2)) & ((_0 = _1) | (_0 = (_1 + 1)))) = (EPS EX EX EX ((((_0 = (clist_size(x) + -1 * 1)) & (_1 = mul(_3, _2))) & (_2 = 2)) & ((_0 = _1) | (_0 = (_1 + 1)))) + EPS EX EX EX ((((_0 = (clist_size(y) + -1 * 1)) & (_1 = mul(_3, _2))) & (_2 = 2)) & ((_0 = _1) | (_0 = (_1 + 1)))))))
Clause(FALSE,List(S(x, n)),!((2 * n + 1) = clist_size(x)))
Clause(FALSE,List(C(x, y, r)),((!(r = nil) & !(head(x) = head(r))) & !(head(y) = head(r))))

Solving ...

------------------------------- Preprocessing ----------------------------------
                                                       #clauses  #relation syms
Initially:                                             9         2


Theories: Types, ADT(red, green, blue, nil, cons), BitShiftMultiplication
Unique satisfiable clauses: 15
   2 clauses with 0 body literals
   13 clauses with 1 body literals

--------------------------------- Statistics -----------------------------------
CEGAR iterations:                                      4
Final number of abstract states:                       3
Final number of matched abstract states:               3
Final number of abstract edges:                        5
Number of generated predicates:                        6
Average predicate size (# of sub-formulas):            1.67

--------------------------------------------------------------------------------

Left(

lazabs.horn.tests.MainBV

Clause(i1(0),List(),true)
Clause(i2(bv_add(8, x, mod_cast(0, 255, 1))),List(i1(x)),bv_ult(8, x, mod_cast(0, 255, 100)))
Clause(i1(bv_add(8, x, mod_cast(0, 255, 2))),List(i2(x)),true)
Clause(FALSE,List(i1(x)),!bv_ult(8, x, mod_cast(0, 255, 200)))

Solving ...

------------------------------- Preprocessing ----------------------------------
                                                       #clauses  #relation syms
Initially:                                             4         2


Theories: Types, GroebnerMultiplication, ModuloArithmetic
State hashing enabled
Unique satisfiable clauses: 2
   1 clauses with 0 body literals
   1 clauses with 1 body literals

--------------------------------- Statistics -----------------------------------
CEGAR iterations:                                      0
Final number of abstract states:                       1
Final number of matched abstract states:               1
Final number of abstract edges:                        2
Number of generated predicates:                        0
Average predicate size (# of sub-formulas):            0.00


--------------------------------------------------------------------------------

Left(

Clause(i1(0),List(),true)
Clause(i2(bv_add(8, x, mod_cast(0, 255, 1))),List(i1(x)),bv_ult(8, x, mod_cast(0, 255, 100)))
Clause(i1(bv_add(8, x, mod_cast(0, 255, 2))),List(i2(x)),true)
Clause(FALSE,List(i1(x)),!bv_ult(8, x, mod_cast(0, 255, 200)))

Solving ...

------------------------------- Preprocessing ----------------------------------
                                                       #clauses  #relation syms
Initially:                                             5         2


------------------------------ Analysing loops ---------------------------------
Loop heads:
   i1/1 (3 clauses, 1 templates)
Theories: Types, GroebnerMultiplication, ModuloArithmetic
State hashing enabled
Unique satisfiable clauses: 5
   1 clauses with 0 body literals
   4 clauses with 1 body literals

--------------------------------- Statistics -----------------------------------
CEGAR iterations:                                      7
Final number of abstract states:                       4
Final number of matched abstract states:               13
Final number of abstract edges:                        15
Number of generated predicates:                        16
Average predicate size (# of sub-formulas):            1.19


--------------------------------------------------------------------------------

Left(

lazabs.horn.tests.MainBV2

------------------------------- Preprocessing ----------------------------------
                                                       #clauses  #relation syms
Initially:                                             4         2


------------------------------ Analysing loops ---------------------------------
Loop heads:
   C/2 (1 clauses, 3 templates)
Theories: Types, GroebnerMultiplication, ModuloArithmetic
State hashing enabled
Unique satisfiable clauses: 3
   1 clauses with 0 body literals
   2 clauses with 1 body literals

--------------------------------- Statistics -----------------------------------
CEGAR iterations:                                      4
Final number of abstract states:                       1
Final number of matched abstract states:               5
Final number of abstract edges:                        6
Number of generated predicates:                        8
Average predicate size (# of sub-formulas):            1.00


--------------------------------------------------------------------------------

sat


array-elim.smt2
sat
(define-fun preds0 ((A Int) (B Int) (C Int) (D Int) (E Int)) Bool (= A 1))
(define-fun preds1 ((A Int) (B Int) (C Int) (D Int) (E Int) (F Int)) Bool (and (= A 1) (or (= F 0) (or (or (and (= C E) (= F 1)) (and (= F 1) (not (= B 0)))) (and (= F 1) (not (= D 0)))))))
(define-fun preds2 ((A Int) (B Int) (C Int) (D Int) (E Int) (F Int)) Bool (and (= F 0) (= A 1)))
(define-fun preds3 ((A Int) (B Int) (C Int) (D Int) (E Int) (F Int)) Bool (and (= A 1) (or (and (= C 1) (= F 0)) (and (= F 0) (not (= B 0))))))
(define-fun preds4 ((A Int) (B Int) (C Int) (D Int) (E Int) (F Int)) Bool (and (= A 1) (or (or (and (= C E) (= F 0)) (and (= F 0) (not (= B 0)))) (and (= F 0) (not (= D 0))))))
(define-fun preds5 ((A Int) (B Int) (C Int) (D Int) (E Int)) Bool (and (= A 1) (or (or (not (= D 0)) (not (= B 0))) (= E C))))
(define-fun preds6 ((A Int) (B Int) (C Int) (D Int) (E Int) (F Int)) Bool (and (= A 1) (or (or (and (= C E) (and (<= F 1) (>= F 0))) (and (not (= B 0)) (and (<= F 1) (>= F 0)))) (and (not (= D 0)) (and (<= F 1) (>= F 0))))))
(define-fun preds7 ((A Int) (B Int) (C Int) (D Int) (E Int) (F Int)) Bool (and (and (= F 0) (= A 1)) (or (or (not (= D 0)) (not (= B 0))) (= E C))))
(define-fun preds8 ((A Int) (B Int) (C Int) (D Int) (E Int)) Bool true)

constant.smt2
sat
(define-fun inv ((A Int) (B Int)) Bool (and (<= B 10) (>= B 5)))

array-elim.smt2
sat
(define-fun preds0 ((A Int) (B (Array Int Int)) (C (Array Int Int))) Bool (= A 1))
(define-fun preds1 ((A Int) (B (Array Int Int)) (C (Array Int Int)) (D Int)) Bool (and (= A 1) (or (= D 0) (and (= D 1) (= (select C 0) (select B 0))))))
(define-fun preds2 ((A Int) (B (Array Int Int)) (C (Array Int Int)) (D Int)) Bool (and (and (<= D 0) (or (= D 0) (and (= D 1) (= (select C 0) (select B 0))))) (= 1 A)))
(define-fun preds3 ((A Int) (B (Array Int Int)) (C (Array Int Int)) (D Int)) Bool (and (or (and (exists ((var0 (Array Int Int))) (= (store var0 D 1) B)) (and (<= D 0) (= D 0))) (exists ((var0 (Array Int Int))) (and (= (store var0 D 1) B) (and (<= D 0) (and (= D 1) (= (select C 0) (select var0 0))))))) (= 1 A)))
(define-fun preds4 ((A Int) (B (Array Int Int)) (C (Array Int Int)) (D Int)) Bool (and (or (and (exists ((var0 (Array Int Int))) (= (store var0 D 1) C)) (and (exists ((var0 (Array Int Int))) (= (store var0 D 1) B)) (and (<= D 0) (= D 0)))) (exists ((var0 (Array Int Int))) (and (= (store var0 D 1) C) (exists ((var1 (Array Int Int))) (and (= (store var1 D 1) B) (and (<= D 0) (and (= D 1) (= (select var0 0) (select var1 0))))))))) (= 1 A)))
(define-fun preds5 ((A Int) (B (Array Int Int)) (C (Array Int Int))) Bool (and (= (select C 0) (select B 0)) (= 1 A)))
(define-fun preds6 ((A Int) (B (Array Int Int)) (C (Array Int Int)) (D Int)) Bool (and (= A 1) (and (and (<= D 1) (>= D 0)) (= (select C 0) (select B 0)))))
(define-fun preds7 ((A Int) (B (Array Int Int)) (C (Array Int Int)) (D Int)) Bool (and (and (<= D 0) (and (and (<= D 1) (>= D 0)) (= (select C 0) (select B 0)))) (= 1 A)))
(define-fun preds8 ((A Int) (B (Array Int Int)) (C (Array Int Int))) Bool true)

leos-example.smt2
Warning: ignoring get-model
sat
(define-fun block_3_function_f__39_40_0 ((A Int) (B Int) (C abi_type) (D crypto_type) (E tx_type) (F state_type) (G Int) (H state_type) (I Int) (J Int) (K Int)) Bool true)
(define-fun block_4_f_38_40_0 ((A Int) (B Int) (C abi_type) (D crypto_type) (E tx_type) (F state_type) (G Int) (H state_type) (I Int) (J Int) (K Int)) Bool (or (not (= C abi_type)) (and (and (= I G) (= H F)) (= A 0))))
(define-fun block_5_return_function_f__39_40_0 ((A Int) (B Int) (C abi_type) (D crypto_type) (E tx_type) (F state_type) (G Int) (H state_type) (I Int) (J Int) (K Int)) Bool (and (and (and (and (and (>= J 0) (<= J 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (>= I 0)) (<= I 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (or (and (exists ((var0 Bool)) (not var0)) (>= J I)) (>= (- I J) 1))) (or (not (= C abi_type)) (and (and (and (= I G) (= H F)) (= A 0)) (and (and (and (and (<= K 115792089237316195423570985008687907853269984665640564039457584007913129639935) (>= K G)) (>= K 0)) (>= (- G J) 1)) (>= J 0))))))
(define-fun block_6_for_header_f_31_40_0 ((A Int) (B Int) (C abi_type) (D crypto_type) (E tx_type) (F state_type) (G Int) (H state_type) (I Int) (J Int) (K Int)) Bool (and (and (= H F) (= I G)) (and (= A 0) (and (and (and (and (<= G 115792089237316195423570985008687907853269984665640564039457584007913129639935) (>= (- G J) 1)) (>= J 0)) (<= K 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (>= K 0)))))
(define-fun block_7_for_body_f_30_40_0 ((A Int) (B Int) (C abi_type) (D crypto_type) (E tx_type) (F state_type) (G Int) (H state_type) (I Int) (J Int) (K Int)) Bool (or (not (= C abi_type)) (and (and (and (= I G) (= H F)) (= A 0)) (and (and (and (and (>= (- G K) 1) (>= K 0)) (>= (- G J) 1)) (>= J 0)) (<= G 115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
(define-fun block_8_f_38_40_0 ((A Int) (B Int) (C abi_type) (D crypto_type) (E tx_type) (F state_type) (G Int) (H state_type) (I Int) (J Int) (K Int)) Bool (or (not (= C abi_type)) (and (and (and (= I G) (= H F)) (= A 0)) (and (and (and (and (<= K 115792089237316195423570985008687907853269984665640564039457584007913129639935) (>= K G)) (>= K 0)) (>= (- G J) 1)) (>= J 0)))))
(define-fun contract_initializer_C_40_1_0 ((A Int) (B Int) (C abi_type) (D crypto_type) (E tx_type) (F state_type) (G state_type)) Bool (or (not (= C abi_type)) (and (= G F) (= A 0))))
(define-fun contract_initializer_after_init_C_40_10_0 ((A Int) (B Int) (C abi_type) (D crypto_type) (E tx_type) (F state_type) (G state_type)) Bool (or (not (= C abi_type)) (and (= G F) (= A 0))))
(define-fun contract_initializer_entry_C_40_9_0 ((A Int) (B Int) (C abi_type) (D crypto_type) (E tx_type) (F state_type) (G state_type)) Bool (or (not (= C abi_type)) (and (= G F) (= A 0))))
(define-fun error_target_2_0 () Bool false)
(define-fun implicit_constructor_entry_C_40_11_0 ((A Int) (B Int) (C abi_type) (D crypto_type) (E tx_type) (F state_type) (G state_type)) Bool (or (not (= C abi_type)) (and (= G F) (= A 0))))
(define-fun interface_C_40_0 ((A Int) (B abi_type) (C crypto_type) (D state_type)) Bool true)
(define-fun nondet_interface_C_40_0 ((A Int) (B Int) (C abi_type) (D crypto_type) (E state_type) (F state_type)) Bool true)
(define-fun summary_2_function_f__39_40_0 ((A Int) (B Int) (C abi_type) (D crypto_type) (E tx_type) (F state_type) (G Int) (H state_type) (I Int)) Bool (and (and (= H F) (= I G)) (= A 0)))
(define-fun summary_constructor_C_40_0_0 ((A Int) (B Int) (C abi_type) (D crypto_type) (E tx_type) (F state_type) (G state_type)) Bool (and (= G F) (and (= A 0) (= (balances F) (balances F)))))

leos-example-2.smt2
unsat

0: FALSE -> 1
1: error_target_2_0 -> 6, 2
2: summary_3_function_g__12_13_0(1, 0, abi_type, crypto_type(const(0), const(0), const(0), const(0)), tx_type(115792089237316195423570985008687907853269984665640564039457584007913129639935, 1461501637330902918203684832716283019655932542975, 115792089237316195423570985008687907853269984665640564039457584007913129639935, 115792089237316195423570985008687907853269984665640564039457584007913129639935, 115792089237316195423570985008687907853269984665640564039457584007913129639935, 115792089237316195423570985008687907853269984665640564039457584007913129639935, store(store(store(store(const(190), 0, 171), 1, 8), 2, 143), 3, 189), bytes_tuple(store(store(store(store(const(191), 0, 171), 1, 8), 2, 143), 3, 189), 4), 1461501637330902918203684832716283019655932542975, 2869465021, 0, 115792089237316195423570985008687907853269984665640564039457584007913129639935, 1461501637330902918203684832716283019655932542975), state_type(store(store(store(store(const(190), 0, 171), 1, 8), 2, 143), 3, 189)), 0, state_type(store(store(store(store(const(190), 0, 171), 1, 8), 2, 143), 3, 189)), 0) -> 3
3: block_7_function_g__12_13_0(1, 0, abi_type, crypto_type(const(0), const(0), const(0), const(0)), tx_type(115792089237316195423570985008687907853269984665640564039457584007913129639935, 1461501637330902918203684832716283019655932542975, 115792089237316195423570985008687907853269984665640564039457584007913129639935, 115792089237316195423570985008687907853269984665640564039457584007913129639935, 115792089237316195423570985008687907853269984665640564039457584007913129639935, 115792089237316195423570985008687907853269984665640564039457584007913129639935, store(store(store(store(const(190), 0, 171), 1, 8), 2, 143), 3, 189), bytes_tuple(store(store(store(store(const(191), 0, 171), 1, 8), 2, 143), 3, 189), 4), 1461501637330902918203684832716283019655932542975, 2869465021, 0, 115792089237316195423570985008687907853269984665640564039457584007913129639935, 1461501637330902918203684832716283019655932542975), state_type(store(store(store(store(const(190), 0, 171), 1, 8), 2, 143), 3, 189)), 0, state_type(store(store(store(store(const(190), 0, 171), 1, 8), 2, 143), 3, 189)), 0) -> 4
4: block_5_g_11_13_0(0, 0, abi_type, crypto_type(const(0), const(0), const(0), const(0)), tx_type(115792089237316195423570985008687907853269984665640564039457584007913129639935, 1461501637330902918203684832716283019655932542975, 115792089237316195423570985008687907853269984665640564039457584007913129639935, 115792089237316195423570985008687907853269984665640564039457584007913129639935, 115792089237316195423570985008687907853269984665640564039457584007913129639935, 115792089237316195423570985008687907853269984665640564039457584007913129639935, store(store(store(store(const(190), 0, 171), 1, 8), 2, 143), 3, 189), bytes_tuple(store(store(store(store(const(191), 0, 171), 1, 8), 2, 143), 3, 189), 4), 1461501637330902918203684832716283019655932542975, 2869465021, 0, 115792089237316195423570985008687907853269984665640564039457584007913129639935, 1461501637330902918203684832716283019655932542975), state_type(store(store(store(store(const(190), 0, 171), 1, 8), 2, 143), 3, 189)), 0, state_type(store(store(store(store(const(190), 0, 171), 1, 8), 2, 143), 3, 189)), 0) -> 5
5: block_4_function_g__12_13_0(0, 0, abi_type, crypto_type(const(0), const(0), const(0), const(0)), tx_type(115792089237316195423570985008687907853269984665640564039457584007913129639935, 1461501637330902918203684832716283019655932542975, 115792089237316195423570985008687907853269984665640564039457584007913129639935, 115792089237316195423570985008687907853269984665640564039457584007913129639935, 115792089237316195423570985008687907853269984665640564039457584007913129639935, 115792089237316195423570985008687907853269984665640564039457584007913129639935, store(store(store(store(const(190), 0, 171), 1, 8), 2, 143), 3, 189), bytes_tuple(store(store(store(store(const(191), 0, 171), 1, 8), 2, 143), 3, 189), 4), 1461501637330902918203684832716283019655932542975, 2869465021, 0, 115792089237316195423570985008687907853269984665640564039457584007913129639935, 1461501637330902918203684832716283019655932542975), state_type(store(store(store(store(const(190), 0, 171), 1, 8), 2, 143), 3, 189)), 0, state_type(store(store(store(store(const(190), 0, 171), 1, 8), 2, 143), 3, 189)), 0)
6: interface_0_C_13_0(0, abi_type, crypto_type(const(0), const(0), const(0), const(0)), state_type(store(store(store(store(const(190), 0, 171), 1, 8), 2, 143), 3, 189))) -> 7
7: summary_constructor_2_C_13_0(0, 0, abi_type, crypto_type(const(0), const(0), const(0), const(0)), tx_type(115792089237316195423570985008687907853269984665640564039457584007913129639935, 1461501637330902918203684832716283019655932542975, 115792089237316195423570985008687907853269984665640564039457584007913129639935, 115792089237316195423570985008687907853269984665640564039457584007913129639935, 115792089237316195423570985008687907853269984665640564039457584007913129639935, 115792089237316195423570985008687907853269984665640564039457584007913129639935, store(store(store(store(const(190), 0, 171), 1, 8), 2, 143), 3, 189), bytes_tuple(const(0), 0), 1461501637330902918203684832716283019655932542975, 0, 0, 115792089237316195423570985008687907853269984665640564039457584007913129639935, 1461501637330902918203684832716283019655932542975), state_type(store(store(store(store(const(190), 0, 171), 1, 8), 2, 143), 3, 189)), state_type(store(store(store(store(const(190), 0, 171), 1, 8), 2, 143), 3, 189))) -> 8, 11
8: contract_initializer_8_C_13_0(0, 0, abi_type, crypto_type(const(0), const(0), const(0), const(0)), tx_type(115792089237316195423570985008687907853269984665640564039457584007913129639935, 1461501637330902918203684832716283019655932542975, 115792089237316195423570985008687907853269984665640564039457584007913129639935, 115792089237316195423570985008687907853269984665640564039457584007913129639935, 115792089237316195423570985008687907853269984665640564039457584007913129639935, 115792089237316195423570985008687907853269984665640564039457584007913129639935, store(store(store(store(const(190), 0, 171), 1, 8), 2, 143), 3, 189), bytes_tuple(const(0), 0), 1461501637330902918203684832716283019655932542975, 0, 0, 115792089237316195423570985008687907853269984665640564039457584007913129639935, 1461501637330902918203684832716283019655932542975), state_type(store(store(store(store(const(190), 0, 171), 1, 8), 2, 143), 3, 189)), state_type(store(store(store(store(const(190), 0, 171), 1, 8), 2, 143), 3, 189))) -> 9
9: contract_initializer_after_init_10_C_13_0(0, 0, abi_type, crypto_type(const(0), const(0), const(0), const(0)), tx_type(115792089237316195423570985008687907853269984665640564039457584007913129639935, 1461501637330902918203684832716283019655932542975, 115792089237316195423570985008687907853269984665640564039457584007913129639935, 115792089237316195423570985008687907853269984665640564039457584007913129639935, 115792089237316195423570985008687907853269984665640564039457584007913129639935, 115792089237316195423570985008687907853269984665640564039457584007913129639935, store(store(store(store(const(190), 0, 171), 1, 8), 2, 143), 3, 189), bytes_tuple(const(0), 0), 1461501637330902918203684832716283019655932542975, 0, 0, 115792089237316195423570985008687907853269984665640564039457584007913129639935, 1461501637330902918203684832716283019655932542975), state_type(store(store(store(store(const(190), 0, 171), 1, 8), 2, 143), 3, 189)), state_type(store(store(store(store(const(190), 0, 171), 1, 8), 2, 143), 3, 189))) -> 10
10: contract_initializer_entry_9_C_13_0(0, 0, abi_type, crypto_type(const(0), const(0), const(0), const(0)), tx_type(115792089237316195423570985008687907853269984665640564039457584007913129639935, 1461501637330902918203684832716283019655932542975, 115792089237316195423570985008687907853269984665640564039457584007913129639935, 115792089237316195423570985008687907853269984665640564039457584007913129639935, 115792089237316195423570985008687907853269984665640564039457584007913129639935, 115792089237316195423570985008687907853269984665640564039457584007913129639935, store(store(store(store(const(190), 0, 171), 1, 8), 2, 143), 3, 189), bytes_tuple(const(0), 0), 1461501637330902918203684832716283019655932542975, 0, 0, 115792089237316195423570985008687907853269984665640564039457584007913129639935, 1461501637330902918203684832716283019655932542975), state_type(store(store(store(store(const(190), 0, 171), 1, 8), 2, 143), 3, 189)), state_type(store(store(store(store(const(190), 0, 171), 1, 8), 2, 143), 3, 189)))
11: implicit_constructor_entry_11_C_13_0(0, 0, abi_type, crypto_type(const(0), const(0), const(0), const(0)), tx_type(115792089237316195423570985008687907853269984665640564039457584007913129639935, 1461501637330902918203684832716283019655932542975, 115792089237316195423570985008687907853269984665640564039457584007913129639935, 115792089237316195423570985008687907853269984665640564039457584007913129639935, 115792089237316195423570985008687907853269984665640564039457584007913129639935, 115792089237316195423570985008687907853269984665640564039457584007913129639935, store(store(store(store(const(190), 0, 171), 1, 8), 2, 143), 3, 189), bytes_tuple(const(0), 0), 1461501637330902918203684832716283019655932542975, 0, 0, 115792089237316195423570985008687907853269984665640564039457584007913129639935, 1461501637330902918203684832716283019655932542975), state_type(store(store(store(store(const(190), 0, 171), 1, 8), 2, 143), 3, 189)), state_type(store(store(store(store(const(190), 0, 171), 1, 8), 2, 143), 3, 189)))

constant.smt2
sat
(define-fun inv ((A (Array Int Int))) Bool (forall ((var0 Int)) (>= (select A var0) 5)))

splitting.smt2
unsat

0: FALSE -> 1
1: inv(store(const(3), 0, 1), store(const(4), 0, 2), 1, 2) -> 2
2: inv(store(const(3), 0, 1), store(const(4), 0, 2), 0, 0)

splitting2.smt2
sat
(define-fun inv ((A (Array Int Int)) (B (Array Int Int)) (C Int)) Bool (or (= C 0) (and (>= C 1) (>= (- (select B 0) (select A 0)) 1))))

splitting3.smt2
sat
(define-fun inv ((A (Array Int Int)) (B (Array Int Int)) (C Int)) Bool (and (>= C 0) (forall ((var0 Int)) (>= (select B var0) 2))))

splitting4.smt2
sat
(define-fun inv ((A (Array Int Int)) (B (Array Int Int)) (C Int)) Bool (and (>= C 0) (forall ((var0 Int)) (>= (select B var0) 2))))

array-elim.smt2
sat
(define-fun preds0 ((A Int) (B (Array Int Int)) (C (Array Int Int))) Bool (= A 1))
(define-fun preds1 ((A Int) (B (Array Int Int)) (C (Array Int Int)) (D Int)) Bool (and (= A 1) (or (= D 0) (and (= D 1) (= (select C 0) (select B 0))))))
(define-fun preds2 ((A Int) (B (Array Int Int)) (C (Array Int Int)) (D Int)) Bool (and (and (<= D 0) (or (= D 0) (and (= D 1) (= (select C 0) (select B 0))))) (= 1 A)))
(define-fun preds3 ((A Int) (B (Array Int Int)) (C (Array Int Int)) (D Int)) Bool (and (or (and (exists ((var0 (Array Int Int))) (= (store var0 D 1) B)) (and (<= D 0) (= D 0))) (exists ((var0 (Array Int Int))) (and (= (store var0 D 1) B) (and (<= D 0) (and (= D 1) (= (select C 0) (select var0 0))))))) (= 1 A)))
(define-fun preds4 ((A Int) (B (Array Int Int)) (C (Array Int Int)) (D Int)) Bool (and (or (and (exists ((var0 (Array Int Int))) (= (store var0 D 1) C)) (and (exists ((var0 (Array Int Int))) (= (store var0 D 1) B)) (and (<= D 0) (= D 0)))) (exists ((var0 (Array Int Int))) (and (= (store var0 D 1) C) (exists ((var1 (Array Int Int))) (and (= (store var1 D 1) B) (and (<= D 0) (and (= D 1) (= (select var0 0) (select var1 0))))))))) (= 1 A)))
(define-fun preds5 ((A Int) (B (Array Int Int)) (C (Array Int Int))) Bool (and (= (select C 0) (select B 0)) (= 1 A)))
(define-fun preds6 ((A Int) (B (Array Int Int)) (C (Array Int Int)) (D Int)) Bool (and (= A 1) (and (and (<= D 1) (>= D 0)) (= (select C 0) (select B 0)))))
(define-fun preds7 ((A Int) (B (Array Int Int)) (C (Array Int Int)) (D Int)) Bool (and (and (<= D 0) (and (and (<= D 1) (>= D 0)) (= (select C 0) (select B 0)))) (= 1 A)))
(define-fun preds8 ((A Int) (B (Array Int Int)) (C (Array Int Int))) Bool true)
