(set-logic HORN)
(set-info :source |
    Benchmark: C_VC
    Output by Princess (http://www.philipp.ruemmer.org/princess.shtml)
|)
(set-info :status unknown)
(declare-datatype parent (
  (parent (child1 Int) (child2 Int))
))
(declare-datatype child (
  (child (p Int) (data Int))
))
(declare-fun Inv_child (Int child) Bool)
(declare-fun Inv_parent (Int parent) Bool)
(declare-fun inv_main10 (Int Int Int) Bool)
(declare-fun inv_main2 (Int) Bool)
(declare-fun inv_main3 (Int Int) Bool)
(declare-fun inv_main4 (Int Int) Bool)
(declare-fun inv_main5 (Int Int Int) Bool)
(declare-fun inv_main6 (Int Int) Bool)
(declare-fun inv_main7 (Int Int) Bool)
(declare-fun inv_main8 (Int Int Int) Bool)
(assert (inv_main2 1))
(assert (forall ((var0 Int)) (or (not (inv_main2 var0)) (inv_main3 (+ var0 1) var0))))
(assert (forall ((var0 Int) (var1 Int)) (or (not (inv_main3 var0 var1)) (inv_main5 (+ var0 1) var1 var0))))
(assert (forall ((var0 Int) (var1 parent) (var2 Int) (var3 Int)) (or (not (and (inv_main5 var0 var3 var2) (Inv_parent var3 var1))) (inv_main4 var0 var3))))
(assert (forall ((var0 Int) (var1 parent) (var2 Int) (var3 child)) (or (not (and (and (inv_main4 var0 var2) (Inv_parent var2 var1)) (Inv_child (child1 var1) var3))) (inv_main6 var0 var2))))
(assert (forall ((var0 Int) (var1 Int)) (or (not (inv_main6 var0 var1)) (inv_main8 (+ var0 1) var1 var0))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 parent)) (or (not (and (inv_main8 var0 var2 var1) (Inv_parent var2 var3))) (inv_main7 var0 var2))))
(assert (forall ((var0 Int) (var1 parent) (var2 child) (var3 child) (var4 Int) (var5 parent)) (or (not (and (and (and (and (inv_main7 var0 var4) (Inv_parent var4 var5)) (Inv_child (child1 var5) var3)) (Inv_parent var4 var1)) (Inv_child (child2 var1) var2))) (inv_main10 var0 var4 (p var3)))))
(assert (forall ((var0 Int)) (or (not (inv_main2 var0)) (Inv_parent var0 (parent 0 0)))))
(assert (forall ((var0 Int) (var1 Int)) (or (not (inv_main3 var0 var1)) (Inv_child var0 (child 0 0)))))
(assert (forall ((var0 Int) (var1 parent) (var2 Int) (var3 Int)) (or (not (and (inv_main5 var0 var3 var2) (Inv_parent var3 var1))) (Inv_parent var3 (parent var2 (child2 var1))))))
(assert (forall ((var0 Int) (var1 parent) (var2 Int) (var3 child)) (or (not (and (and (inv_main4 var0 var2) (Inv_parent var2 var1)) (Inv_child (child1 var1) var3))) (Inv_child (child1 var1) (child var2 (data var3))))))
(assert (forall ((var0 Int) (var1 Int)) (or (not (inv_main6 var0 var1)) (Inv_child var0 (child 0 0)))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 parent)) (or (not (and (inv_main8 var0 var2 var1) (Inv_parent var2 var3))) (Inv_parent var2 (parent (child1 var3) var1)))))
(assert (forall ((var0 Int) (var1 parent) (var2 child) (var3 Int)) (or (not (and (and (inv_main7 var0 var3) (Inv_parent var3 var1)) (Inv_child (child2 var1) var2))) (Inv_child (child2 var1) (child var3 (data var2))))))
(assert (forall ((var0 child) (var1 Int) (var2 parent) (var3 Int) (var4 Int)) (not (and (and (and (inv_main10 var1 var4 var3) (Inv_parent var4 var2)) (Inv_child (child1 var2) var0)) (not (= (p var0) var4))))))
(check-sat)
